<?xml version="1.0" encoding="utf-8"?>
<mx:Box xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" addedToStage="onAddedStage(event);">
	
	<mx:Metadata>
		[Event(name="changeComboBoxProvincia", type="flash.events.Event")]
		[Event(name="inputIdentificaCittadino", type="flash.events.Event")]
		
	</mx:Metadata>
	<mx:Script>
		<![CDATA[

			import it.lisit.siss.flex.utility.UtilDate;
			import mx.formatters.Formatter;
			import mx.controls.DateField;
			import mx.controls.Text;
			import mx.events.PropertyChangeEvent;
			import mx.events.ChildExistenceChangedEvent;
			import mx.controls.DataGrid;

			import mx.formatters.DateFormatter;
			import mx.formatters.NumberFormatter;
			import mx.controls.dataGridClasses.DataGridColumn;
			import it.lisit.siss.flex.communication.icce.voIdentificaCittadinoEsteso.VoAssistito;
			import mx.events.IndexChangedEvent;
			import mx.controls.Alert;
			import mx.containers.FormItem;
			import mx.validators.Validator;
			import it.lisit.siss.flex.communication.coop.voComuniDiNascita.VoComune;
			import mx.validators.StringValidator;
			
			import it.lisit.siss.flex.communication.coop.voProvinceDiNascita.VoProvincia;
			import it.lisit.siss.flex.communication.icce.voIdentificaCittadinoEsteso.VoInputIdentificaCittadinoEsteso;
			import it.lisit.siss.flex.graphic.ImageDefinition;
			import it.lisit.siss.flex.utility.ExpressionRegExpValidator;
			
			import mx.controls.TextInput;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			
			
			import mx.validators.ValidationResult;
			import mx.validators.RegExpValidator;
			import mx.formatters.DateFormatter;
			
			/////////////////////////////////////////////////////
			// flag per controllare la abilitazione e disabilitazione dei campi 
			[Bindable]
			private var _disabilitaField:Boolean 	= false;
			[Bindable]
			private var _enableUpField:Boolean 		= false;
			[Bindable]
			private var _enableDownField:Boolean 	= false;
			//
			private var isCodiceAssistito:Boolean = false;
			// l'input text per l'identioficativo
			private var identificativo:TextInput;
			private var nome:TextInput;
			private var cognome:TextInput;
			private var dataDiNascita:DateField;
			private var pageNumber:TextInput;
			private var maxRecord:TextInput;
			private var occorenzeText:Text;
			private var comboProvincia:ComboBox;
			private var comboWilCard:ComboBox;
			private var comboComune:ComboBox;
			private var buttonConfermaAssistito:Button;
			private var buttonAzzeraAssistito:Button;
			private var buttonRicercaAssistito:Button;
			private var tableRisultatoRicercaAssistiti:DataGrid;
			private var listValidator:Array;
			private var formatter:DateFormatter;
			/**
			  * Codice Fiscale del cittadino selezionato dalla tabella con il risultato della ricerca.
			  */ 
			 [Bindable]
			 private var codiceFiscaleSelezionato:String;
			 
			 /**
			  * Numero delle occorrenze dei cittadini trovati 
			  */
			 [Bindable]
			 private var occorrenze:String = "0";
			////////////////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////////////////
			////////////////////////////////////////////////////////////////////////////////////////////////
			/**
			  * Indica il valore della provincia di nascita selezionato dalla combobox.
			  */
			 public var provinciaDiNascitaSelezionata:String;
			 /// input per la ricerca del cittadino, valorizzato solo quando viene spedito l'evento Event.inputIdentificaCittadino
			 public var voInputIdentificaCittadino:VoInputIdentificaCittadinoEsteso;
			 /**
			 * DataProvider della combobox "comuniDiNascita"
			 */
			 [Bindable]
			 public var elencoComuni:Array;
			 /**
			 * DataProvider della combobox "provincieDiNascita"
			 */
			 [Bindable]
			 public var elencoProvincie:Array;
			 /**
			 * DataProvider della tabella elenco cittadini.
			 */
			 [Bindable]
			 public var risultatoRicercaMultipla:Array;
			 ////////////////////////////////////////////////////////////////////////////////////////////////
			 ////////////////////////////////////////////////////////////////////////////////////////////////
			 ////////////////////////////////////////////////////////////////////////////////////////////////
			 ////////////////////////////////////////////////////////////////////////////////////////////////
			 ////////////////////////////////////////////////////////////////////////////////////////////////
			  
			private function onAddedStage(event:Event):void
			{
				formatter = new DateFormatter();
         		formatter.formatString	= "DD/MM/YYYY";
				this.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE,onPropertyChange);
			}
			private function onPropertyChange(e:PropertyChangeEvent):void
			{
				
				if(e.property == "codiceFiscaleSelezionato")
				{
					if(e.newValue!=null)
					{
						  _enableDownField = true;
					}else
					{
						_enableDownField = false;
					}
				}else if(e.property=="risultatoRicercaMultipla")
				{
					if(e.newValue!=null)
					{
						//this.tableRisultatoRicercaAssistiti.visible = true;
						this.occorrenze = ""+this.risultatoRicercaMultipla.length;
						_enableUpField = true;
					}else
					{
						_enableUpField = false;
					}
				}
			}
			/////////////////////////////////////////
			private function getValidatorSesso():ValidatorListString
			{
				var vali:ValidatorListString 	= new ValidatorListString();
				vali.source						= sesso;
				vali.property					= "selectedValue";
				vali.required					= true;
				vali.listString					= ["M","F"]; 
				vali.errorEmpitylist			= "Selezionare un sesso"; 
				vali.requiredFieldError			= "Sesso: Selezionare un sesso";
				return vali;
			}
			private function getValidatorMaxRecord():RegExpValidator
			{
				var reg:RegExpValidator = new RegExpValidator();
				reg.source				= maxRecord;
				reg.property			= "text";  
				reg.expression			= ExpressionRegExpValidator.REGEXP_NUMERIC;
				reg.required			= false;
				reg.noMatchError		= "Righe per pagina: Deve essere numerico";
				return reg;
			}
			private function getValidatorPageNumber():RegExpValidator
			{
				var reg:RegExpValidator = new RegExpValidator();
				reg.source				= pageNumber;
				reg.property			= "text";  
				reg.expression			= ExpressionRegExpValidator.REGEXP_NUMERIC;
				reg.required			= false;
				reg.noMatchError		= "Pagina Nr.: Deve essere numerico";
				return reg;
			}
			private function getValidatorNome():RegExpValidator
			{
				var reg:RegExpValidator = new RegExpValidator();
				reg.source				= nome;
				reg.property			= "text";  
				reg.expression			= ExpressionRegExpValidator.REGEXP_LETTERS;
				reg.required			= false;
				reg.noMatchError		= "Nome: Deve essere nel formato testo";
				return reg;
			}
			///
			private function getValidatorCognome():RegExpValidator
			{
				var reg:RegExpValidator = new RegExpValidator();
				reg.source				= cognome;
				reg.property			= "text";  
				reg.expression			= ExpressionRegExpValidator.REGEXP_LETTERS;
				reg.required			= true;
				reg.noMatchError		= "Cognome: Deve essere nel formato testo";
				reg.requiredFieldError	= "Cognome: Inserire il cognome"
				return reg;
			}
			///
			private function getValidatorCodiceFiscale():RegExpValidator
			{
				var reg:RegExpValidator = new RegExpValidator();
				reg.source				= identificativo;
				reg.property			= "text";
				reg.expression			= ExpressionRegExpValidator.REGEXP_CODICE_FISCALE;
				reg.required			= false;
				reg.noMatchError		= "Identificativo: Deve essere un codice fiscale o assitito valido";
				return reg;
			}
			private function getValidatorCodiceAssistito():RegExpValidator
			{
				var reg:RegExpValidator = new RegExpValidator();
				reg.source				= identificativo;
				reg.property			= "text";
				reg.required			= false;
				reg.noMatchError		= "Identificativo: deve essere un codice fiscale o assitito valido";
				reg.expression			= ExpressionRegExpValidator.REGEXP_CODICE_ASSISTITO;
				return reg;
			}
			 
			 private function validateAll():String
			 {
			 	if(listValidator==null)
			 	{
				 	listValidator 		= new Array();
					listValidator.push( getValidatorCognome() );
					listValidator.push( getValidatorNome() );
					listValidator.push( getValidatorSesso() );
					listValidator.push( getValidatorPageNumber() );
					listValidator.push( getValidatorMaxRecord() );
				}
				///
			 	var errorMessageArray:String = "";
			 	var validatorErrorArray:Array = Validator.validateAll(listValidator);
	            var isValidForm:Boolean = validatorErrorArray.length == 0;
	            if (!isValidForm) 
                {
                    var err:ValidationResultEvent;
                    for each (err in validatorErrorArray) 
                    {
                    	errorMessageArray += err.message +"\n";
                    }
                }
                return errorMessageArray;
			 }
			 
        	/**
			 * Gestione dell'evento di cambio valore per la combobox delle provincie di nascita. 
			 */
			private function onChangeValueComboBoxProvincia(event:Event):void
			{
				event.stopPropagation();
				this.provinciaDiNascitaSelezionata = VoProvincia(ComboBox(event.target).selectedItem).COD_PROV;
				dispatchEvent(new Event("changeComboBoxProvincia"));
			}
			/**
			 * Premuto il tasto AZZERA (Assistito), esegue l'eliminazione di tutti i parametri di ricerca.
			 */
			private function onClickPulsanteAzzeraRicercaAssistito(event:Event):void
			{
				reset();
			}
			private function partialReset():void
			{
				this.maxRecord.text 			= "";
				this.pageNumber.text 			= "";
				this.occorenzeText.text			= "";
				this.cognome.text				= "";
				this.cognome.errorString		= null;
				this.nome.text					= "";
				this.nome.errorString			= null;
				this.dataDiNascita.text 		= "";
				this.sesso.selection 			= null;
				this.comboWilCard.selectedIndex = 0;
				this.comboComune.selectedIndex  = -1;
			}
			public function reset():void
			{
				this.codiceFiscaleSelezionato	= null;
				_enableUpField 					= false;
				_enableDownField				= false;
				_disabilitaField				= false;
				partialReset();
				this.identificativo.text		= "";
				this.comboProvincia.selectedIndex = -1;
				this.elencoComuni 				= new Array();
			}
			 private function validCodice():void
			 {
			 	isCodiceAssistito = false;
				// codice identificativo cittadino
				var identificativoIn:String = identificativo.text;
			 	var validCodiceFiscale:RegExpValidator 		= getValidatorCodiceFiscale();
				var resCodFiscale:ValidationResultEvent 	= validCodiceFiscale.validate( );
				var isCodiceFiscale:Boolean 				= (resCodFiscale.type=="valid");
				if(!isCodiceFiscale)
				{
					var validCodiceAssistito:RegExpValidator 	= getValidatorCodiceAssistito();
					var resCodAssistito:ValidationResultEvent 	= validCodiceAssistito.validate( );
					isCodiceAssistito 							= (resCodAssistito.type=="valid");	
				}
				if(!isCodiceFiscale && !isCodiceAssistito)
				{
					identificativo.errorString = null;
					//identificativo.toolTip = "";
					 Alert.show("Identificativo: Deve essere un codice fiscale o assitito valido", "Errore nella form...", Alert.OK);
				}else
				{
					voInputIdentificaCittadino = new VoInputIdentificaCittadinoEsteso();
					if(isCodiceAssistito)
					{
						voInputIdentificaCittadino.idAssistito = identificativoIn;	
						
						
					}else
					{
						voInputIdentificaCittadino.codiceFiscale = identificativoIn;
					}
					dispatchEvent(new Event("inputIdentificaCittadino"));
				}
			 }
			 
			 private function raccogliData():void
			 {
			 	////////////////////////////////////////////////////
				// get: Cognome
				var cognomeIn:String = cognome.text;
	    		// get: Nome
        		var nomeIn:String = nome.text;
        		// get: Data di Nascita
        		var dataDiNascitaIn:String = dataDiNascita.text;
        		/// getSesso
        		var sessoIn:String = sesso.selectedValue.toString();
        		// get: Codice Comune di Nascita
        		var codiceComuneIn:String = "";
        		if(comboComune.selectedItem!=null)
        		{
	  				codiceComuneIn = VoComune(comboComune.selectedItem).COD_CCOMU;
        		} 
        	    // get: pageNumber..
	    		var pageNumberIn:String = pageNumber.text;
	    		// get: maxRecords..
		    	var maxRecordsIn:String = maxRecord.text; 
	    		// get: wilCard
		    	var useWildCardIn:String;
	    		if(comboWilCard.text=="Cognome e Nome puntuale"){useWildCardIn="1";}
	    		if(comboWilCard.text=="Solo Nome putuale"){useWildCardIn="2";}
	    		if(comboWilCard.text=="Solo Cognome puntuale"){useWildCardIn="3";}
	    		if(comboWilCard.text=="Cognome e Nome parziale"){useWildCardIn="4";} 
	    		////////////////////////////////////////////////////
    			if(nomeIn.length==0 && dataDiNascitaIn.length==0)
        		{
        			Alert.show("Nome o data devono essere valorizzati", "Errore nella form...", Alert.OK);
        		}else
        		{
        			voInputIdentificaCittadino 					= new VoInputIdentificaCittadinoEsteso();
        			voInputIdentificaCittadino.nome    			= (nomeIn!=null && nomeIn.length>0)? nomeIn : ""; 
        			voInputIdentificaCittadino.cognome 			= cognomeIn;
        			voInputIdentificaCittadino.codiceSesso	 	= sessoIn;
        			voInputIdentificaCittadino.dataNascita	 	= (dataDiNascitaIn!=null && dataDiNascitaIn.length>0) ? dataDiNascitaIn : "";
        			voInputIdentificaCittadino.idLocalitaNascita= (codiceComuneIn!=null && codiceComuneIn.length>0) ? codiceComuneIn : "";
        			voInputIdentificaCittadino.maxRecords		= (maxRecordsIn!=null && maxRecordsIn.length>0) ? maxRecordsIn : "";
        			voInputIdentificaCittadino.pageNumber		= (pageNumberIn!=null && pageNumberIn.length>0) ? pageNumberIn : "";
        			voInputIdentificaCittadino.useWildcard		= (useWildCardIn!=null && useWildCardIn.length>0) ? useWildCardIn : "";
        			dispatchEvent(new Event("inputIdentificaCittadino"));
        		} 
			 }
			/**
			 * Premuto il tasto RICERCA ASSISTITO, esegue la chiamata al servizio ICCE:identificaCittadinoEsteso/2008-01:
			 * - CASO 1: in caso di valorizzazione del campo Identificativo(tramite un codice fiscale o un id Assistito)
			 * - CASO 2: ricerca per dati personali
			 */
			private function onClickPulsanteRicercaAssistito(event:Event):void
			{
				if(_disabilitaField)
				{
					validCodice();
				}else
				{
					var messageError:String = validateAll();
	                if (messageError.length>0) 
	                {
	                    Alert.show(messageError, "Errore nella form...", Alert.OK);
	                }else
	                {
	                	raccogliData();
	                }
				}
			}
			
			/**
			 * Selezione di un assistito dalla tabella con l'elenco del risultato della ricerca. 
			 * Recupera il codice fiscale per invocare una nuova chiamata al servizio "identifcaCittadinoEsteso/2008-01" dell seb ICCE.
			 */
			private function onSelectedItemTableAssistiti(event:ListEvent):void
			{
				var assistito:VoAssistito	= this.risultatoRicercaMultipla[event.rowIndex] as VoAssistito;
				var dataNascita:String		= assistito.dataNascitaCittadino;
				var born:Date				= UtilDate.fromStringToDate(dataNascita);
				//var isMaggiorenne:Boolean	= UtilDate.isMaggiorenne(born,new Date());
				/*if (!isMaggiorenne){
					Alert.show("Il genitore/tutore selezionato non e' maggiorenne.");
					return;
				}*/
				this.codiceFiscaleSelezionato = assistito.codiceFiscaleCittadino;
			}
        	/**
			 * Formattazione delle date nel formato "DD/MM/YYYY"
			 */
			
			private function resizeColumn(item:Object, column:DataGridColumn):String
			{
				var codice:String = item[column.dataField];
				var nw:Number = this.measureText(codice).width;
				if(nw> column.width)
				{
					column.width = nw;
				}
				return codice
			}
			private function formatDateTableItemFromYYYYMMDDtoDD_MM_YYYY(item:Object, column:DataGridColumn):String
		    {
         		var dataField:String = item[column.dataField];
         		if(dataField==null || dataField.length==0)return "";
         		var data:Date	= UtilDate.fromStringToDate( dataField );
         		return formatter.format( data );
      		}
      		 
        	/**
			 * Premuto il tasto "CONFERMA CITTADINO", esegue la chiamata al servizio ICCE:identificaCittadinoEsteso/2008-01:
			 * - Visualizza il pannello con i dati del cittadino in dettaglio. 
			 */
			private function onClickPulsanteConfermaAssistito(event:Event):void
			{
				 voInputIdentificaCittadino = new VoInputIdentificaCittadinoEsteso();
				 voInputIdentificaCittadino.codiceFiscale =  this.codiceFiscaleSelezionato;
				 dispatchEvent(new Event("inputIdentificaCittadino"));
			}
			//  
			private function onChangeInputIdentificativo(e:Event):void
			{
				var target:TextInput = e.target as TextInput;
				var num:int			 = target.text.length;
				if(num>0)
				{
					target.text = target.text.toUpperCase();
					if(!_disabilitaField)
					{
						_disabilitaField = true;
						partialReset();
					}
				}else
				{
					if(_disabilitaField)
					{
						_disabilitaField = false;
					}	
				}
			}
			
			private function upperCase(event:Event):void {
				var ti:TextInput = event.currentTarget as TextInput;
				ti.text = ti.text.toUpperCase();
			}
		]]>
	</mx:Script>
	 
	<mx:VBox width="100%" verticalAlign="middle" horizontalAlign="center" verticalGap="20">
		<mx:HBox width="100%">
			<!-- Etichette Identificativo/Nome/Cognome/Data di nascita/Provincia di nascita -->
			<mx:VBox verticalAlign="middle" verticalGap="10">
				<mx:Label text="Identificativo" />
				<mx:Label text="Nome"  />
				<mx:Label text="Cognome" />
				<mx:Label text="Data di nascita" />
				<mx:Label text="Provincia di nascita" />
				<mx:Label text="Criterio ricerca assistito"  />
			</mx:VBox>
				
			<!-- Textfield Identificativo/Nome/Cognome/Data di nascita/Provincia di nascita-->
			<mx:VBox verticalAlign="middle">
				<mx:TextInput width="160" maxChars="16" 
					enabled="{!_enableUpField}" 
					change="onChangeInputIdentificativo(event);" >
					<mx:addedToStage>
						<![CDATA[
							this.identificativo  = event.target as TextInput;
						]]>
					</mx:addedToStage>
				</mx:TextInput>
				<mx:TextInput enabled="{!_disabilitaField &amp;&amp; !_enableUpField}" change="upperCase(event)">
					<mx:addedToStage>
						<![CDATA[
							this.nome = event.target as TextInput;
							 
						]]>
					</mx:addedToStage>
				</mx:TextInput>
				<mx:TextInput enabled="{!_disabilitaField &amp;&amp; !_enableUpField}" change="upperCase(event)">
					<mx:addedToStage>
						<![CDATA[
							this.cognome = event.target as TextInput;
							 
						]]>
					</mx:addedToStage>
				</mx:TextInput>
				<mx:DateField  width="160" formatString="DD / MM / YYYY" enabled="{!_disabilitaField &amp;&amp; !_enableUpField}">
					<mx:addedToStage>
						<![CDATA[
							this.dataDiNascita = event.target as DateField;
							 
						]]>
					</mx:addedToStage>
				</mx:DateField>
				
				<mx:ComboBox  width="169" dataProvider="{this.elencoProvincie}" 
					change="onChangeValueComboBoxProvincia(event);" labelField="DESC_DPROV"  
					fontSize="10" prompt="Selezionare una provincia"  
					enabled="{!_disabilitaField &amp;&amp; !_enableUpField}">
					<mx:addedToStage>
						<![CDATA[
							this.comboProvincia = event.target as ComboBox;
							 
						]]>
					</mx:addedToStage>
				</mx:ComboBox>
				
				<mx:ComboBox  width="169" fontSize="10" enabled="{!_disabilitaField &amp;&amp; !_enableUpField}">
					<mx:dataProvider>
						<mx:Array>
							<mx:String>Cognome e Nome parziale</mx:String>
							<mx:String>Cognome e Nome puntuale</mx:String>
							<mx:String>Solo Nome puntuale</mx:String>
							<mx:String>Solo Cognome puntuale</mx:String>
						</mx:Array>
					</mx:dataProvider>
					<mx:addedToStage>
						<![CDATA[
							this.comboWilCard = event.target as ComboBox;
							 
						]]>
					</mx:addedToStage>
				</mx:ComboBox> 
			</mx:VBox>
			
			<mx:VBox verticalAlign="middle" verticalGap="10">
				<mx:Label text="" />
				<mx:Label text="" />
				<mx:Label text="" />
				<mx:Label text="Sesso" />
				<mx:Label text="Comune di nascita" />
				<mx:HBox verticalAlign="middle">
					<mx:Label text="Pagina Nr." />
					<mx:TextInput  width="28"  maxChars="2" enabled="{!_disabilitaField &amp;&amp; !_enableUpField}">
						<mx:addedToStage>
							<![CDATA[
								this.pageNumber = event.target as TextInput;
								 
							]]>
						</mx:addedToStage>
					</mx:TextInput>
				</mx:HBox>
			</mx:VBox>
			
			<!-- Etichette Sesso/Comune di nascita -->
			<mx:VBox verticalAlign="middle" verticalGap="8">
				<mx:Label text="" />
				<mx:Label text="" />
				<mx:Label text="" />
				
				<!-- Sesso -->
				<mx:HBox verticalAlign="middle">
					<mx:RadioButtonGroup id="sesso" enabled="{!_disabilitaField &amp;&amp; !_enableUpField}"/>
					<mx:RadioButton label="M" groupName="sesso" />
					<mx:RadioButton label="F" groupName="sesso" />
				</mx:HBox>
				
				<!-- Combo Comune -->
				<mx:ComboBox width="169" dataProvider="{this.elencoComuni}" 
					labelField="DESC_DCOMU"  fontSize="10" prompt="Selezionare un comune" 
					enabled="{!_disabilitaField &amp;&amp; this.elencoComuni!=null &amp;&amp; this.elencoComuni.length>0 &amp;&amp; !_enableUpField}">
					<mx:addedToStage>
						<![CDATA[
							this.comboComune = event.target as ComboBox;  
						]]>
					</mx:addedToStage>
				</mx:ComboBox>
				
				<mx:HBox verticalAlign="middle">
					<!-- Pag -->
					<mx:HBox verticalAlign="middle" width="170">
						<mx:Label text="Righe per pagina" />
						<mx:TextInput width="36" maxChars="3" enabled="{!_disabilitaField &amp;&amp; !_enableUpField}">
							<mx:addedToStage>
								<![CDATA[
									this.maxRecord = event.target as TextInput;
									 
								]]>
							</mx:addedToStage>
						</mx:TextInput>
					</mx:HBox>
					
					<!-- Occorrenze -->
					<mx:HBox verticalAlign="middle" width="140">
						<mx:Label text="Risultato ricerca:"/>
						<mx:Text text="{this.occorrenze}" enabled="{!_disabilitaField &amp;&amp; !_enableUpField}">
							<mx:addedToStage>
								<![CDATA[
									this.occorenzeText = event.target as Text;
								]]>
							</mx:addedToStage>
						</mx:Text>
					</mx:HBox>
				
					<!-- Pulsanti -->							
					<mx:HBox verticalAlign="middle">
						<mx:Button label="Ricerca" 
							toolTip="Esegue la ricerca del cittadino in base ai criteri indicati" 
							icon="{ImageDefinition.ICONA_BOTTONE_RICERCA_16X16}" 
							styleName="button" height="25" 
							buttonMode="true" 
							enabled="{!_enableUpField}"
							click="onClickPulsanteRicercaAssistito(event)">
							 <mx:addedToStage>
							 	<![CDATA[
							 		this.buttonRicercaAssistito = event.target as Button;
							 	]]>
							 </mx:addedToStage>
						</mx:Button>
							
						<mx:Button label="Azzera" 
							toolTip="Elimina i criteri di ricerca" 
							icon="{ImageDefinition.ICONA_BOTTONE_CANCELLA_16X16}" 
							styleName="button" height="25" buttonMode="true" 
							click="onClickPulsanteAzzeraRicercaAssistito(event)">
							<mx:addedToStage>
								<![CDATA[
									this.buttonAzzeraAssistito = event.target as Button;
								]]>
							</mx:addedToStage>
						</mx:Button>
					</mx:HBox>
				</mx:HBox>
			</mx:VBox>
		</mx:HBox>
		
		<mx:HBox width="100%" horizontalAlign="center" visible="{_enableUpField}">
			
			<mx:DataGrid  height="150" width="900" useHandCursor="true" 
					dataProvider="{this.risultatoRicercaMultipla}" 
					itemClick="onSelectedItemTableAssistiti(event)"  >
					<mx:addedToStage>
						<![CDATA[
							this.tableRisultatoRicercaAssistiti = event.target as DataGrid;	
						]]>
					</mx:addedToStage>
				<mx:columns>
					<mx:DataGridColumn headerText="Codice Fiscale" dataField="codiceFiscaleCittadino" width="120" labelFunction="resizeColumn"/>
					<mx:DataGridColumn headerText="Codice Sanitario" dataField="codiceSanitarioCittadino" width="100"/>
					<mx:DataGridColumn headerText="Cognome" dataField="cognomeCittadino" />
					<mx:DataGridColumn headerText="Nome" dataField="nomeCittadino" />
					<mx:DataGridColumn headerText="Stato" dataField="statoAssistito" width="70"/>
					<mx:DataGridColumn headerText="Data di nascita" dataField="dataNascitaCittadino" width="90" 
						labelFunction="formatDateTableItemFromYYYYMMDDtoDD_MM_YYYY" />
					<mx:DataGridColumn headerText="Comune di nascita" dataField="comuneNascitaCittadino"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:HBox>
		
		<mx:Button  
				visible="{_enableUpField &amp;&amp; _enableDownField}"
				label="Conferma" toolTip="Imposta il cittadino selezionato nella tabella." 
				icon="{ImageDefinition.ICONA_BOTTONE_CONFERMA_16X16}" 
				styleName="button" height="25" buttonMode="true" 
				click="onClickPulsanteConfermaAssistito(event)">
			<mx:addedToStage>
				<![CDATA[
					this.buttonConfermaAssistito = event.target as Button; 
				]]>
			</mx:addedToStage>
		</mx:Button>
	</mx:VBox>
</mx:Box>
