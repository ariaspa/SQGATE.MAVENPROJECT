<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%" 
	xmlns:assistito="it.lisit.siss.flex.gui.assistito.*" enabled="false">
	<mx:Metadata>
		
		[Event(name="serviceSebErrorProvince", type="it.lisit.siss.flex.communication.event.ServiceSEBErrorEvent")]
		[Event(name="serviceSebEsitonegativoProvince", type="it.lisit.siss.flex.communication.event.ServiceSEBCompleteEvent")]
		[Event(name="serviceSEBFaultEventProvince", type="it.lisit.siss.flex.communication.event.ServiceSEBFaultEvent")]
		[Event(name="serviceSebErrorComuni", type="it.lisit.siss.flex.communication.event.ServiceSEBErrorEvent")]
		[Event(name="serviceSebEsitonegativoComuni", type="it.lisit.siss.flex.communication.event.ServiceSEBCompleteEvent")]
		[Event(name="serviceSEBFaultEventComuni", type="it.lisit.siss.flex.communication.event.ServiceSEBFaultEvent")]
		[Event(name="serviceSebErrorIdentificaCittadino", type="it.lisit.siss.flex.communication.event.ServiceSEBErrorEvent")]
		[Event(name="serviceSebEsitonegativoIdentificaCittadino", type="it.lisit.siss.flex.communication.event.ServiceSEBCompleteEvent")]
		[Event(name="serviceSEBFaultEventIdentificaCittadino", type="it.lisit.siss.flex.communication.event.ServiceSEBFaultEvent")]
		[Event(name="warningProvince", type="it.lisit.siss.flex.gui.assistito.WarnigEvent")]
		[Event(name="warningComuni", type="it.lisit.siss.flex.gui.assistito.WarnigEvent")]
		[Event(name="warningIdentificaCittadino", type="it.lisit.siss.flex.gui.assistito.WarnigEvent")]
		[Event(name="cittadinoIdentificatoEvent", type="it.lisit.siss.flex.gui.assistito.CittadinoIdentificatoEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			  
			import it.lisit.siss.flex.core.ConstStatusBar;
			import it.lisit.siss.flex.core.Core;
			import it.lisit.siss.flex.communication.icce.voIdentificaCittadinoEsteso.VoInputIdentificaCittadinoEsteso;
			import it.lisit.siss.flex.core.MessageObject;
			
			import it.lisit.siss.flex.utility.debug.Debug;
			import it.lisit.siss.flex.communication.event.VoResponse;
			import it.lisit.siss.flex.communication.icce.voIdentificaCittadinoEsteso.VoOutputIdentificaCittadinoEsteso2008_01;
			import it.lisit.siss.flex.communication.icce.service.AbstractServiceIdentificaCittadinoEsteso2008_01;
			import it.lisit.siss.flex.communication.icce.voIdentificaCittadinoEsteso.VoDatiCittadino;
			import it.lisit.siss.flex.utility.IIterator;
			import it.lisit.siss.flex.communication.icce.voIdentificaCittadinoEsteso.VoOutputIdentificaCittadinoEsteso2008_01;
			import it.lisit.siss.flex.communication.icce.service.AbstractServiceIdentificaCittadinoEsteso2008_01;
			
			
			import it.lisit.siss.flex.communication.coop.voComuniDiNascita.VoOutputComuniDiNascita;
			import it.lisit.siss.flex.communication.coop.service.AbstractServiceComuniDiNascita;
			import it.lisit.siss.flex.communication.event.VoListaWarning;
			import it.lisit.siss.flex.communication.coop.voProvinceDiNascita.VoOutputProvinceDiNascita;
			import it.lisit.siss.flex.communication.event.ServiceSEBCompleteEvent;
			import it.lisit.siss.flex.communication.event.ServiceSEBFaultEvent;
			import it.lisit.siss.flex.communication.event.ServiceSEBErrorEvent;
			import it.lisit.siss.flex.communication.icce.IFactoryICCE;
			import it.lisit.siss.flex.communication.coop.IFactoryCOOP;
			import it.lisit.siss.flex.communication.coop.service.AbstractServiceProvincieDiNascita;
			//
			private var _factoryCoop:IFactoryCOOP;
			private var _factoryIcce:IFactoryICCE;
			//
			private var identificaCittadino:IdentificaCittadino;
			private var visualizzaCittadino:VisualizzaCittadino;
			
			private var serviceIdentificaCitt:AbstractServiceIdentificaCittadinoEsteso2008_01;
			//
			public var automaticoVisualizzaCittadino:Boolean = false;
			//
			public function set factoryCOOP(value:IFactoryCOOP):void{_factoryCoop = value;}
			public function get factoryCOOP():IFactoryCOOP{return _factoryCoop;}
			//
			public function set factoryICCE(value:IFactoryICCE):void{_factoryIcce = value;}
			public function get factoryICCE():IFactoryICCE{return _factoryIcce;}
			//
			private function onAddedStageVisualizza(event:Event):void
			{
				this.visualizzaCittadino = event.target as VisualizzaCittadino;
			}
			private function onAddedStageIdentifica(event:Event):void
			{
				this.identificaCittadino = event.target as IdentificaCittadino;
			}
			/**
			 * Start dell'applicazione gui che va a cercare la carta
			*/
			public function identificaCarta():void
			{
				//[Event(name="startLoadData", type="flash.events.Event")]
				//[Event(name="endLoadData", type="flash.events.Event")]
				if(factoryICCE==null)
				{
					throw new Error("factoryICCE ha valore null");
				}
				if(factoryCOOP==null)
				{
					//throw new Error("factoryCOOP ha valore null");
				}
				this.enabled	= true;
				reset();
				removeListenerIdentifica( serviceIdentificaCitt );
				this.visualizzaCittadino.visible = true;
				serviceIdentificaCitt = factoryICCE.getServiceIdentificaCittadino();
				addListenerIdentifica(serviceIdentificaCitt);
				sendStartLoad();
				serviceIdentificaCitt.execute( new VoInputIdentificaCittadinoEsteso() );
			}
			/**
			 * Start dell'applicazione gui che si posiziona sulla gui
			*/
			public function identificaAssistito():void
			{
				if(factoryICCE==null)
				{
					throw new Error("factoryICCE ha valore null");
				}
				if(factoryCOOP==null)
				{
					throw new Error("factoryCOOP ha valore null");
				}
				/////////////////////////////////////////////////	
				removeListenerIdentifica( serviceIdentificaCitt );
				reset();
				this.identificaCittadino.visible = true;
				this.enabled	= true;
				addAndLoadProvince();
			}
			public function reset():void
			{
				this.identificaCittadino.reset();
				this.visualizzaCittadino.reset();
				this.identificaCittadino.visible = false;
				this.visualizzaCittadino.visible = false;
			}
			public function showAssistito(cittadino:VoDatiCittadino):void
			{
				reset();
				this.visualizzaCittadino.dataUltimaModifica	= cittadino.dataUltimaVariazioneAnagrafici;
				this.visualizzaCittadino.cittadino			= cittadino;
				this.visualizzaCittadino.visible			= true;	
				this.identificaCittadino.visible			= false;
			} 
			
			private function sendEndLoad():void
			{
				//dispatchEvent(new Event("endLoadData"));
				Core.wait.hide( );
			}
			private function sendStartLoad():void
			{
				//dispatchEvent(new Event("startLoadData"));
				Core.wait.show( );
			}
			//==============================================
			// PROVINCE
			//==============================================
			private function addAndLoadProvince():void
			{
				var province:AbstractServiceProvincieDiNascita = factoryCOOP.getServiceProvincieDiNascita();
				addListenerProvince(province);
				sendStartLoad();
				
				province.getElenco();
			}
			private function addListenerProvince(service:AbstractServiceProvincieDiNascita):void
			{
				service.addEventListener(ServiceSEBErrorEvent.SERVICE_SEB_ERROR,onServiceErrorProvince);
				service.addEventListener(ServiceSEBFaultEvent.SERVICE_SEB_FAULT,onServiceFaultprovince);
				service.addEventListener(ServiceSEBCompleteEvent.SERVICE_COMPLETE,onServiceSuccessProvince);
			}
			private function removeListenerProvince(service:AbstractServiceProvincieDiNascita):void
			{
				service.removeEventListener(ServiceSEBErrorEvent.SERVICE_SEB_ERROR,onServiceErrorProvince);
				service.removeEventListener(ServiceSEBFaultEvent.SERVICE_SEB_FAULT,onServiceFaultprovince);
				service.removeEventListener(ServiceSEBCompleteEvent.SERVICE_COMPLETE,onServiceSuccessProvince);
			}
			private function onServiceErrorProvince(e:ServiceSEBErrorEvent):void
			{
				e.stopPropagation();
				removeListenerProvince(e.target as AbstractServiceProvincieDiNascita);
				sendEndLoad();
				var event:ServiceSEBErrorEvent 		= new ServiceSEBErrorEvent(e.getMessage(),e.getBody(),"serviceSebErrorProvince");
				dispatchEvent( event );
				
			}
			
			private function onServiceFaultprovince(e:ServiceSEBFaultEvent):void
			{
				e.stopPropagation();
				removeListenerProvince(e.target as AbstractServiceProvincieDiNascita);
				sendEndLoad()
				var event:ServiceSEBFaultEvent		 	= new ServiceSEBFaultEvent(e.getFault(),"serviceSEBFaultEventProvince");
				dispatchEvent( event );
			}
			private function onServiceSuccessProvince(e:ServiceSEBCompleteEvent):void
			{
				
				e.stopPropagation();
				removeListenerProvince(e.target as AbstractServiceProvincieDiNascita);
				var response:VoResponse  			= e.getResponse(0);
				
				if(!response.isEsitoNegativo)
				{
					// si conclude qui 
					var warning:VoListaWarning			= response.warnings;
					if(warning!=null && warning.lenght()>0)
					{
						dispatchEvent(new WarnigEvent("warningProvince",warning));
					}
					var item:VoOutputProvinceDiNascita  = response.esitoPositivo as VoOutputProvinceDiNascita;
					var dtprovince:Array = item.province.toArray();
					this.identificaCittadino.elencoProvincie	= dtprovince;
				}else
				{
					var temp:Array	= [ response ];
					var event:ServiceSEBCompleteEvent 	= new ServiceSEBCompleteEvent("serviceSebEsitonegativoProvince",temp);
					dispatchEvent( event );
				}
				sendEndLoad();
			}
			 
			//==============================================
			// END PROVINCE
			//==============================================
			//==============================================
			// COMUNI
			//==============================================
			private function addAndLoadComuniDiNascita(service:AbstractServiceComuniDiNascita):void
			{
				service.addEventListener(ServiceSEBErrorEvent.SERVICE_SEB_ERROR,onServiceErrorComuni);
				service.addEventListener(ServiceSEBFaultEvent.SERVICE_SEB_FAULT,onServiceFaultComuni);
				service.addEventListener(ServiceSEBCompleteEvent.SERVICE_COMPLETE,onServiceSuccessComuni);
			}		
			private function removeListenerComuniDiNascita(service:AbstractServiceComuniDiNascita):void
			{
				service.removeEventListener(ServiceSEBErrorEvent.SERVICE_SEB_ERROR,onServiceErrorComuni);
				service.removeEventListener(ServiceSEBFaultEvent.SERVICE_SEB_FAULT,onServiceFaultComuni);
				service.removeEventListener(ServiceSEBCompleteEvent.SERVICE_COMPLETE,onServiceSuccessComuni);
			}
			private function onServiceErrorComuni(e:ServiceSEBErrorEvent):void
			{
				e.stopPropagation();
				removeListenerComuniDiNascita(e.target as AbstractServiceComuniDiNascita);
				sendEndLoad();
				var event:ServiceSEBErrorEvent 		= new ServiceSEBErrorEvent(e.getMessage(),e.getBody(),"serviceSebErrorComuni");
				dispatchEvent( event );
			}
			 
			private function onServiceFaultComuni(e:ServiceSEBFaultEvent):void
			{
				e.stopPropagation();
				removeListenerComuniDiNascita(e.target as AbstractServiceComuniDiNascita);
				sendEndLoad();
				var event:ServiceSEBFaultEvent		 	= new ServiceSEBFaultEvent(e.getFault(),"serviceSEBFaultEventComuni");
				dispatchEvent( event );
			}
			private function onServiceSuccessComuni(e:ServiceSEBCompleteEvent):void
			{
				
				e.stopPropagation();
				removeListenerComuniDiNascita(e.target as AbstractServiceComuniDiNascita);
				var response:VoResponse = e.getResponse( 0 );
				if(!response.isEsitoNegativo)
				{
					var warning:VoListaWarning			= response.warnings;
					if(warning!=null && warning.lenght()>0)
					{
						dispatchEvent(new WarnigEvent("warningComuni",warning));
					}
					var item:VoOutputComuniDiNascita  = response.esitoPositivo as VoOutputComuniDiNascita;
					var dtcomuni:Array = item.comuni.toArray();
					this.identificaCittadino.elencoComuni = dtcomuni;
				}else
				{
					var temp:Array		= [ response ];
					var event:ServiceSEBCompleteEvent 	= new ServiceSEBCompleteEvent("serviceSebEsitonegativoComuni",temp);
					dispatchEvent( event );
				}
				sendEndLoad();
			}
			//==============================================
			// END COMUNI
			//==============================================
			//==============================================
			// IDENTIFICA
			//==============================================
			private function addListenerIdentifica(service:AbstractServiceIdentificaCittadinoEsteso2008_01):void
			{
				service.addEventListener(ServiceSEBErrorEvent.SERVICE_SEB_ERROR,onServiceErrorIdentifica);
				service.addEventListener(ServiceSEBFaultEvent.SERVICE_SEB_FAULT,onServiceFaultIdentifica);
				service.addEventListener(ServiceSEBCompleteEvent.SERVICE_COMPLETE,onServiceSuccessIdentifica);
			}		
			private function removeListenerIdentifica(service:AbstractServiceIdentificaCittadinoEsteso2008_01):void
			{
				if(service!=null)
				{
					service.removeEventListener(ServiceSEBErrorEvent.SERVICE_SEB_ERROR,onServiceErrorIdentifica);
					service.removeEventListener(ServiceSEBFaultEvent.SERVICE_SEB_FAULT,onServiceFaultIdentifica);
					service.removeEventListener(ServiceSEBCompleteEvent.SERVICE_COMPLETE,onServiceSuccessIdentifica);
				}
			}
			private function onServiceErrorIdentifica(e:ServiceSEBErrorEvent):void
			{
				e.stopPropagation();
				removeListenerIdentifica(e.target as AbstractServiceIdentificaCittadinoEsteso2008_01);
				sendEndLoad();
				var event:ServiceSEBErrorEvent 		= new ServiceSEBErrorEvent(e.getMessage(),e.getBody(),"serviceSebErrorIdentificaCittadino");
				dispatchEvent( event );
			}
			 
			private function onServiceFaultIdentifica(e:ServiceSEBFaultEvent):void
			{
				e.stopPropagation();
				removeListenerIdentifica(e.target as AbstractServiceIdentificaCittadinoEsteso2008_01);
				sendEndLoad();
				var event:ServiceSEBFaultEvent		 	= new ServiceSEBFaultEvent(e.getFault(),"serviceSEBFaultEventIdentificaCittadino");
				dispatchEvent( event );
			}
			
			private function onServiceSuccessIdentifica(e:ServiceSEBCompleteEvent):void
			{
				try{
					Core.log.info("onServiceSuccessIdentifica start" );
				
					e.stopPropagation();
					removeListenerIdentifica(e.target as AbstractServiceIdentificaCittadinoEsteso2008_01);
					var response:VoResponse					= e.getResponse( 0 );
					Core.log.info("response.isEsitoNegativo start : " +response.isEsitoNegativo);
					if(!response.isEsitoNegativo)
					{
						var warning:VoListaWarning			= response.warnings;
						if(warning!=null && warning.lenght()>0)
						{
							dispatchEvent(new WarnigEvent("warningIdentificaCittadino",warning));
						}
						var item:VoOutputIdentificaCittadinoEsteso2008_01  = response.esitoPositivo as VoOutputIdentificaCittadinoEsteso2008_01;
						Core.log.info("item.isRispostaSingola : " +item.isRispostaSingola);
						if(item.isRispostaSingola)
						{
							 //this.visualizzaCittadino.dataUltimaModifica 	= item.rispostaSingola.datiCittadino.dataUltimaVariazioneAnagrafici;
							 //this.visualizzaCittadino.cittadino 			= item.rispostaSingola.datiCittadino;
							 /**  
							 * Nel caso  automaticoVisualizzaCittadino sia settato a true
							 * switch direttamente sulla vista Visualizza cittadino
							 */
							Core.log.info("onServiceSuccessIdentifica "+this.automaticoVisualizzaCittadino);
							 if(this.automaticoVisualizzaCittadino)
							 {
							 	showAssistito(item.rispostaSingola.datiCittadino);
							 }
							 dispatchEvent(new CittadinoIdentificatoEvent("cittadinoIdentificatoEvent",item.rispostaSingola.datiCittadino as VoDatiCittadino));
						}else
						{
							var iterator:IIterator = item.rispostaMultipla.listaAssistiti.iterator;
							if(iterator!=null)
							{
								var list:Array = new Array();
								while(iterator.hasNext())
								{
									list.push( iterator.next() );
								}
								this.identificaCittadino.risultatoRicercaMultipla = list;
							}
						}
					}else
					{
						Core.log.info("onServiceSuccessIdentifica serviceSebEsitonegativoIdentificaCittadino ");
						var temp:Array = [ response ];
						var event:ServiceSEBCompleteEvent = new ServiceSEBCompleteEvent("serviceSebEsitonegativoIdentificaCittadino",temp);
						dispatchEvent( event );
					}
				}catch(e:Error)
				{
					Core.log.fatal(" Error "+e.getStackTrace());
				}finally{
					sendEndLoad();
				} 
			}
			//==============================================
			// END IDENTIFICA
			//==============================================
			private function onInputIdentificaCittadino(e:Event):void
			{
				// input cittadino pronto
				Debug.logInfo("onInputIdentificaCittadino codiceFiscale : " + this.identificaCittadino.voInputIdentificaCittadino.codiceFiscale);
				if(this.identificaCittadino.voInputIdentificaCittadino!=null)
				{
					removeListenerIdentifica( serviceIdentificaCitt );
					serviceIdentificaCitt = factoryICCE.getServiceIdentificaCittadino();
					addListenerIdentifica(serviceIdentificaCitt);
					sendStartLoad();
					try{
						serviceIdentificaCitt.execute( this.identificaCittadino.voInputIdentificaCittadino );
					}catch(e:Error)
					{
						Debug.logFatal("serviceIdentificaCitt.execute " +e.getStackTrace());
					}
				}
			}
			private function onChangeComboIdentifica(e:Event):void
			{
				// scelto provincia 
				var codprovincia:String = this.identificaCittadino.provinciaDiNascitaSelezionata;
				var service:AbstractServiceComuniDiNascita = factoryCOOP.getServiceComuniDiNascita();
				addAndLoadComuniDiNascita(service);
				sendStartLoad();
				service.getElenco( codprovincia );
			}
			
		]]>
	</mx:Script>
	 
	
	<assistito:IdentificaCittadino 
		visible="false"
		addedToStage="onAddedStageIdentifica(event)" 
		width="100%" height="100%" 
		inputIdentificaCittadino="onInputIdentificaCittadino(event);"
		changeComboBoxProvincia="onChangeComboIdentifica(event);"/>
		
	<assistito:VisualizzaCittadino
		addedToStage="onAddedStageVisualizza(event);" 
		width="100%" height="100%"/>
		
</mx:Canvas>
