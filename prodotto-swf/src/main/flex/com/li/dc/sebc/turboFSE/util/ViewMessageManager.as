///////////////////////////////////////////////////////////
//  ViewMessageManager.as
//  Macromedia ActionScript Implementation of the Class ViewMessageManager
//  Generated by Enterprise Architect
//  Created on:      31-ago-2010 20:13:43
//  Original author: Marco Salonia
///////////////////////////////////////////////////////////

package com.li.dc.sebc.turboFSE.util
{
	 
	import com.li.dc.sebc.turboFSE.model.ConstDataProxy;
	import com.li.dc.sebc.turboFSE.model.FSEModel;
	import com.li.dc.sebc.turboFSE.view.component.TurboAlert;
	import com.li.dc.sebc.turboFSE.view.nodeView.AreaLavoro;
	
	import flash.events.EventPhase;
	
	import it.lispa.siss.sebc.flex.color.HTMLTabColor;
	import it.lispa.siss.sebc.flex.debug.Debug;
	import it.lispa.siss.sebc.flex.graphic.displayerMessage.IDisplayerMessage;
	import it.lispa.siss.sebc.flex.graphic.displayerMessage.PopMessage;
	import it.lispa.siss.sebc.flex.graphic.image.ImageDefinition;
	import it.lispa.siss.sebc.flex.messages.ConstStatus;
	import it.lispa.siss.sebc.flex.messages.Message;
	import it.lispa.siss.sebc.flex.smartCard.SmartCardManager;
	
	import mx.controls.Alert;
	import mx.core.IFlexDisplayObject;
	import mx.core.UIComponent;
	import mx.events.CloseEvent;
	import mx.events.FlexEvent;
	/**
	 * @author Marco Salonia
	 * @version 1.0
	 * @created 31-ago-2010 20:13:43
	 */
	public class ViewMessageManager implements IDisplayerMessage
	{
		private static var instance:ViewMessageManager;
		public static function getInstance():ViewMessageManager
		{
			if(instance == null)
			{
				instance = new ViewMessageManager(new HideClass());
			}
			return instance;
		}
		//////////////////////////////////////////////////////////////////////
		public static const CONST_P_WIDTH:uint		= 60;
		public static const CONST_P_HEIGHT:uint		= 70;
		//////////////////////////////////////////////////////////////////////
		private var area:AreaLavoro;
		private var afterCloseCallBack:Function;
		public function ViewMessageManager(hide:HideClass)
		{
		}
		public function getAreaPopUp( ):AreaLavoro
		{
			return this.area;
		}
		public function setPopUp(pop:AreaLavoro):void
		{
			this.area = pop;
		}
		public function afterCloseDisplayer(callbackFunction:Function):void
		{
			this.afterCloseCallBack = callbackFunction;
		}
		public function showDisplayer( message:Message ):void
		{
			var disp:UIComponent 	= getPopUp( message );
			disp.width				= getAreaPopUp().width/100*CONST_P_WIDTH;
			disp.height 			= getAreaPopUp().height/100*CONST_P_HEIGHT;
			getAreaPopUp().bckValuePopUp = getColor( message.type ); 	
			if(this.area.openPopUp( disp ))
			{
				this.area.centrePopUp();
			}
		}
		 private function getColor(type:String):uint
		 {
		 	var cl:uint = HTMLTabColor.GREEN;
		 	/*switch(type)
		 	{
		 		case ConstStatus.ERROR:
		 			cl = HTMLTabColor.RED;
		 			break;
		 		case ConstStatus.INFO:
		 			cl = HTMLTabColor.AZURE;
		 			break;
		 		case ConstStatus.WARNING:
		 			cl = HTMLTabColor.YELLOW;
		 			break;
		 		case ConstStatus.OK:
		 			cl = HTMLTabColor.GREEN;
		 			break;
		 	}*/
		 	return cl;
		 }
		public function closeDisplayer():void
		{
			if(this.area.closePopUp() && afterCloseCallBack!=null)
			{
				afterCloseCallBack();
			}
		}
		public function popUpBusy():Boolean
		{
			return getAreaPopUp().popUpBusy();
		}
		public function showPanel( pan:UIComponent,bckColor:int = HTMLTabColor.VIOLET, pad:Object = null ):void
		{
			var wp:Number	= getAreaPopUp().width;
			var hp:Number	= getAreaPopUp().height;
			var wid:Number	= getAreaPopUp().width/100*CONST_P_WIDTH;
			var hei:Number	= getAreaPopUp().height/100*CONST_P_HEIGHT;
			 
			if(pad!=null)
			{
				wid = pad.width != null ? pad.width : (pad.horizontal != null ? wp - pad.horizontal : wid ); 
				hei = pad.height != null ? pad.height : (pad.vertical != null ? hp - pad.vertical : hei ); 	 
			} 
			
			pan.width 		= wid;
			pan.height 		= hei;
			
			getAreaPopUp().bckValuePopUp = bckColor; 
				
			if(this.area.openPopUp( pan ))
			{
				this.area.centrePopUp();
			}
		}
		private function getPopUp(message:Message):UIComponent
		{
			var pop:PopMessage 	= new PopMessage();
			pop.showCloseButton	= true;
			pop.addEventListener(CloseEvent.CLOSE,onClosePop);
			pop.titleIcon		= getIcon(message.type);
			pop.title			= message.title; 
			pop.message			= message.message;
			return pop; 
		}
		private function onClosePop(e:CloseEvent):void
		{
			var pop:PopMessage 	= e.target as PopMessage;
			pop.removeEventListener(CloseEvent.CLOSE,onClosePop);
			closeDisplayer();
		}
		private function getIcon(type:String):Class
		{	
			switch(type)
			{
				case ConstStatus.OK:
					return ImageDefinition.ICONA_OK;
				case ConstStatus.INFO:
					return ImageDefinition.ICONA_INFO;
				case ConstStatus.WARNING:
					return ImageDefinition.ICONA_WARNING;
				case ConstStatus.ERROR:
					return ImageDefinition.ICONA_ERROR;
			}
			return ImageDefinition.ICONA_OK;
		}
		public function showAlert(text:String = "", 
			title:String = "",
			flags:uint = 0x4 /* Alert.OK */, 
			closeHandler:Function = null, 
			iconClass:Class = null, 
			defaultButtonFlag:uint = 0x4 /* Alert.OK */):void
		{
			
			var alert:TurboAlert = new TurboAlert(); 
			
			if (flags & Alert.OK||
            flags & Alert.CANCEL ||
            flags & Alert.YES ||
            flags & Alert.NO)
	        {
	            alert.buttonFlags = flags;
	        }
	        //////
         	if (defaultButtonFlag == Alert.OK ||
            defaultButtonFlag == Alert.CANCEL ||
            defaultButtonFlag == Alert.YES ||
            defaultButtonFlag == Alert.NO)
	        {
	            alert.defaultButtonFlag = defaultButtonFlag;
	        }
        	alert.text = text;
	        alert.title = title;
	        alert.iconClass = iconClass;
			if (closeHandler != null)
			{
            	alert.addEventListener(CloseEvent.CLOSE, closeHandler);
   			}
        	// Setting a module factory allows the correct embedded font to be found.
       		alert.moduleFactory = UIComponent(this.area).moduleFactory;
         
        	//PopUpManager.addPopUp(alert, parent, modal);
        	getAreaPopUp().bckValuePopUp  = HTMLTabColor.DARKGREEN;
        	
        	//alert.width = 400;
        	//alert.height = 400; 	
        	alert.setActualSize(alert.getExplicitOrMeasuredWidth(),alert.getExplicitOrMeasuredHeight());
        	alert.addEventListener(FlexEvent.CREATION_COMPLETE, creationCompleteHandler);
        		
        	this.area.openPopUp( alert );
		}
		private  function creationCompleteHandler(event:FlexEvent):void
	    {
	        if (event.target is IFlexDisplayObject && event.eventPhase == EventPhase.AT_TARGET)
	        {
	            event.target.removeEventListener(FlexEvent.CREATION_COMPLETE, creationCompleteHandler);
	            this.area.centrePopUp();
	            //PopUpManager.centerPopUp(IFlexDisplayObject(event.target));
	        }
	    }
	    
		private var oldMsgWait:String;	
		public function freezeApplication(freeze:Boolean, message:String=null):void
		{
			Debug.logDebug("ViewMessageManager freezeApplication freeze "+freeze);
			var m:FSEModel = FSEModel.getInstance();
			if(freeze)
			{
				if(message!=null)
				{
					oldMsgWait = m.retrieveProxy(ConstDataProxy.DATA_MESSAGE).getData() as String;
					m.retrieveProxy(ConstDataProxy.DATA_MESSAGE).update( message );
				}
				SmartCardManager.getInstance().enable = false;
				m.retrieveProxy(ConstDataProxy.STATE_AREA_LAVORO).update( AreaLavoro.WAIT );
			}else
			{
				SmartCardManager.getInstance().enable = true;
				m.retrieveProxy(ConstDataProxy.STATE_AREA_LAVORO).update( AreaLavoro.ACTIVE );
				if(oldMsgWait!=null)
				{
					m.retrieveProxy(ConstDataProxy.DATA_MESSAGE).update( oldMsgWait );
					oldMsgWait = null;
				}
			}
		}	
		
	}//end ViewMessageManager
}
 

    
                                
class HideClass{}
 