<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	paddingLeft="4" paddingRight="4" 
	width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
	<mx:Metadata>
		[Event(name="changeProvincia", type="com.li.dc.sebc.turboFSE.events.MessageEvent")]
		[Event(name="identificaCittadinoEvent", type="com.li.dc.sebc.turboFSE.events.DataIdentificaCittadinoEvent")]
		[Event(name="errorValidateEvent", type="com.li.dc.sebc.turboFSE.events.ErrorValidateEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import it.lispa.siss.sebc.middleground.entity.DatoCodificato;
			import it.lispa.siss.sebc.middleground.entity.Provincia;
			import it.lispa.siss.sebc.middleground.entity.Comune;
			import it.lispa.siss.sebc.middleground.entity.Cittadino;
			import mx.events.ListEvent;
			import com.li.dc.sebc.turboFSE.util.UtilDate;
			import com.li.dc.sebc.turboFSE.util.validator.ValidatoriCittadino;
			import com.li.dc.sebc.turboFSE.events.MessageEvent;
			import com.li.dc.sebc.turboFSE.events.DataIdentificaCittadinoEvent;
			import com.li.dc.sebc.turboFSE.events.ErrorValidateEvent;
			import com.li.dc.sebc.turboFSE.model.vo.DataIdentificaCittadino;
			 
			import mx.validators.ValidationResult;
			import mx.validators.RegExpValidator;
			import mx.events.ValidationResultEvent;
			import mx.validators.Validator;
			import mx.controls.Button;
			import mx.controls.DateField;
			import mx.controls.ComboBox;
			import mx.controls.Text;
			import mx.controls.TextInput;
			import mx.formatters.DateFormatter;
			import mx.events.ListEvent;
			//
			
			import com.li.dc.sebc.turboFSE.events.DataIdentificaCittadinoEvent;
			import com.li.dc.sebc.turboFSE.events.ErrorValidateEvent;
			//
			import com.li.dc.sebc.turboFSE.model.vo.DataIdentificaCittadino;
			//
			import com.li.dc.sebc.turboFSE.util.validator.ValidatoriCittadino;
			import com.li.dc.sebc.turboFSE.util.validator.ValidatorListString;
			//
			public static const IDENT_SINGOLA:String	= "identSingola";
			public static const IDENT_MULTIPLA:String	= "identMultipla";
			/////////////////////////////////////////////////////// 
			[Bindable] public var enableUpField:Boolean 	= true;
			[Bindable] public var disabilitaField:Boolean 	= true;
			
			[Bindable] public var iconButtonRicerca:Class;
			[Bindable] public var iconButtonAzzera:Class;
			[Bindable] public var iconBottoneConferma:Class;
			[Bindable] public var styleButtonRicerca:String;
			[Bindable] public var styleButtonAzzera:String;
			[Bindable] public var styleButtonConferma:String;
			[Bindable] public var tooltipButtonAzzera:String;
			[Bindable] public var tooltipButtonRicerca:String;
			[Bindable] public var elencoComuni:Array;
			[Bindable] public var elencoProvincie:Array;
			[Bindable] public var elencoCittadini:Array;
			 
			/////////////////////////////////////////////////////// 
			[Bindable] private var vMultipla:Boolean 	= false;
			[Bindable] private var occorrenze:String;
			/////////////////////////////////////////////////////// 
			private var nome :TextInput;
			private var cognome :TextInput;
			private var pageNumber :TextInput;
			private var identificativo :TextInput;
			private var maxRecord :TextInput;
			private var occorenzeText :Text;
			private var dataDiNascita :DateField;
			private var comboProvincia :ComboBox;
			private var comboWilCard :ComboBox;
			private var comboComune :ComboBox;
			private var buttonRicercaAssistito:Button;
			private var buttonAzzeraAssistito:Button;
			private var codiceFiscaleSelezionato:String;
			
			public var formatter:DateFormatter;
			///////////////
			 
			private var listValidator:Array;
			private var isIdentificativoSelect:Boolean = false;
			/////////////////////////////////////////////////////// 
			 
			private function onEnterState(event:Event):void
			{
				vMultipla = (this.currentState == IDENT_SINGOLA) ? false : true;
				if(!vMultipla)
				{
					clear();
				}
			}
			private function clear():void
			{
				if( nome!=null )
				{
					nome.text 			= "";
					cognome.text		= "";
					pageNumber.text		= "";
					identificativo.text	= "";
					maxRecord.text		= "";
					dataDiNascita.text	= "";
					 
					nome.errorString 			= null;
					cognome.errorString 		= null;
					pageNumber.errorString 		= null;
					identificativo.errorString 	= null;
					maxRecord.errorString 		= null;
					dataDiNascita.errorString 	= null;
					 
					comboProvincia.selectedIndex 	= -1;
					comboWilCard.selectedIndex 		= 0;
					comboComune.selectedIndex 		= -1;
					 
					disabilitaField = true;
					enableUpField	= true;
				}
			}
			/////////////
			private function onClickPulsanteAzzeraRicercaAssistito(event:Event):void
			{
				clear();
			}
			 
			 private function raccogliData():DataIdentificaCittadino
			 {
			 	
			 	// get: Nome
        		var nomeIn:String = nome.text;
        		// get: Data di Nascita
        		var dataDiNascitaIn:String = dataDiNascita.text;
				// get: Cognome
				var cognomeIn:String = cognome.text;
        		/// getSesso
        		var sessoIn:String = sesso.selectedValue.toString();
        		// get: Codice Comune di Nascita
        		var codiceComuneIn:String = "";
        		if(comboComune.selectedItem!=null)
        		{
	  				//codiceComuneIn = VoComune(comboComune.selectedItem).COD_CCOMU;
	  				codiceComuneIn = DatoCodificato(comboComune.selectedItem).codice;
        		} 
        	    // get: pageNumber..
	    		var pageNumberIn:String = pageNumber.text;
	    		// get: maxRecords..
		    	var maxRecordsIn:String = maxRecord.text; 
	    		// get: wilCard
		    	var useWildCardIn:String;
		    	
	    		if(comboWilCard.text=="Cognome e Nome puntuale"){useWildCardIn="1";}
	    		if(comboWilCard.text=="Solo Nome putuale"){useWildCardIn="2";}
	    		if(comboWilCard.text=="Solo Cognome puntuale"){useWildCardIn="3";}
	    		if(comboWilCard.text=="Cognome e Nome parziale"){useWildCardIn="4";} 
	    		////////////////////////////////////////////////////
    			var dt:DataIdentificaCittadino 				= new DataIdentificaCittadino();
    			dt.nome    			= (nomeIn!=null && nomeIn.length>0)? nomeIn : ""; 
    			dt.cognome 			= cognomeIn;
    			dt.codiceSesso	 	= sessoIn;
    			dt.dataNascita	 	= (dataDiNascitaIn!=null && dataDiNascitaIn.length>0) ? dataDiNascitaIn : "";
    			dt.idLocalitaNascita= (codiceComuneIn!=null && codiceComuneIn.length>0) ? codiceComuneIn : "";
    			dt.maxRecords		= (maxRecordsIn!=null && maxRecordsIn.length>0) ? maxRecordsIn : "";
    			dt.pageNumber		= (pageNumberIn!=null && pageNumberIn.length>0) ? pageNumberIn : "";
    			dt.useWildcard		= (useWildCardIn!=null && useWildCardIn.length>0) ? useWildCardIn : "";
    			return dt;
			 }
			private function  sendIdentificativo():void
			{
				isIdentificativoSelect						= false;
				var identificativoIn:String 				= identificativo.text;
			 	var validCodiceFiscale:RegExpValidator 		= ValidatoriCittadino.getValidatorCodiceFiscale(identificativo);
				var resCodFiscale:ValidationResultEvent 	= validCodiceFiscale.validate( );
				var isCodiceFiscale:Boolean 				= (resCodFiscale.type=="valid");
				var validCodiceAss:RegExpValidator 			= ValidatoriCittadino.getValidatorCodiceAssistito(identificativo);
				var resCodAss:ValidationResultEvent 		= validCodiceAss.validate( );
				var isCodiceAss:Boolean 					= (resCodAss.type=="valid");
				var data:DataIdentificaCittadino;
				if(isCodiceFiscale)
				{	
					data = new DataIdentificaCittadino();
					data.codiceFiscale = identificativoIn;
					this.dispatchEvent( new DataIdentificaCittadinoEvent(DataIdentificaCittadinoEvent.IDENTIFICA_CITTADINO_EVENT,data));
				}else if(isCodiceAss)
				{
					data = new DataIdentificaCittadino();
					data.idAssistito = identificativoIn;
					this.dispatchEvent( new DataIdentificaCittadinoEvent(DataIdentificaCittadinoEvent.IDENTIFICA_CITTADINO_EVENT,data));
				}else
				{
					this.dispatchEvent( new ErrorValidateEvent(ErrorValidateEvent.ERROR_VALIDATE_EVENT,[resCodFiscale,resCodAss]));
				} 			
			}
			private function  sendOther():void
			{
				createValidator();
			 	var validatorErrorArray:Array 	= Validator.validateAll(listValidator);
	            var isValidForm:Boolean 		= validatorErrorArray.length == 0;
	            if(!isValidForm)
	            {
	            	this.dispatchEvent( new ErrorValidateEvent(ErrorValidateEvent.ERROR_VALIDATE_EVENT,validatorErrorArray));
	            }else
	            {
	        		var nomeIn:String 			= nome.text;
	        		var dataDiNascitaIn:String 	= dataDiNascita.text;
	        		if(nomeIn.length==0 && dataDiNascitaIn.length==0)
	        		{
	        			var res:ValidationResult 		= new ValidationResult(true,"text","Errore nella form","Nome o data devono essere valorizzati");
	        			var ev:ValidationResultEvent 	= new ValidationResultEvent(ValidationResultEvent.INVALID,false,false,"nome,datadinascita",[res]);
	        			this.dispatchEvent( new ErrorValidateEvent(ErrorValidateEvent.ERROR_VALIDATE_EVENT,[ev]));
	        		}else
	        		{
	        			var data:DataIdentificaCittadino = raccogliData();
						this.dispatchEvent( new DataIdentificaCittadinoEvent(DataIdentificaCittadinoEvent.IDENTIFICA_CITTADINO_EVENT,data));
	        		}
	            } 
			}
			private function onClickPulsanteRicercaAssistito(event:Event):void
			{
				if(isIdentificativoSelect)
				{
					sendIdentificativo();
				}else
				{
					sendOther();
				}
			}
			private function createValidator():void
			{
				if(listValidator==null)
		 		{
				 	listValidator = new Array();
					//listValidator.push( ValidatoriCittadino.getValidatorCodiceAssistito(identificativo) );
					listValidator.push( ValidatoriCittadino.getValidatorNome(nome) );
					listValidator.push( ValidatoriCittadino.getValidatorSesso( sesso ) );
					listValidator.push( ValidatoriCittadino.getValidatorPageNumber(pageNumber ) );
					listValidator.push( ValidatoriCittadino.getValidatorMaxRecord( maxRecord) );
				}
			}
			 
			private function onChangeInputIdentificativo(event:Event):void
			{ 
				if(this.identificativo.text.length>0)
				{
					isIdentificativoSelect = true;
					disabilitaField = false;
					enableUpField	= true;
					this.identificativo.text = this.identificativo.text.toUpperCase();
				}else
				{
					isIdentificativoSelect = false;
					disabilitaField = true;
					enableUpField	= true;	
				} 
			}
			private function onChangeValueComboBoxProvincia(event:Event):void
			{
				var value:Object = (event.target as ComboBox).selectedItem;
				this.dispatchEvent(new MessageEvent(MessageEvent.CHANGE_PROVINCIA,(value as DatoCodificato).codice));
			}
			private function upperCase(event:Event):void
			{
				var str:String = (event.target as TextInput).text;
				(event.target as TextInput).text = str.toUpperCase();
			} 
			 
			private function onSelectedItemTableAssistiti(event:ListEvent):void
			{
				var assistito:Cittadino	= elencoCittadini[event.rowIndex] as Cittadino;
				this.codiceFiscaleSelezionato = assistito.codiceFiscale;
			}
			private function onClickPulsanteConfermaAssistito(event:Event):void
			{
				var dt:DataIdentificaCittadino 	= new DataIdentificaCittadino();
    		 	dt.codiceFiscale	=  this.codiceFiscaleSelezionato;
    			dt.maxRecords		=  "";
    			dt.pageNumber		=  "";
    			dt.useWildcard		=  "";
				this.dispatchEvent( new DataIdentificaCittadinoEvent(DataIdentificaCittadinoEvent.IDENTIFICA_CITTADINO_EVENT,dt)); 
			}
			private function resizeColumn(item:Object, column:DataGridColumn):String
			{
				var cit:Cittadino = item as Cittadino;
				var codice:String = cit.codiceFiscale;
				if(codice!=null)
				{
					var nw:Number = this.measureText(codice).width;
					if(nw> column.width)
					{
						column.width = nw;
					}
					return codice
				}
				return " - ";
			}
			private function formatDateTableItemFromYYYYMMDDtoDD_MM_YYYY(item:Object, column:DataGridColumn):String
		    {
		    	var cit:Cittadino = item as Cittadino;
		    	if(cit.dataNascita!=null){
	         		var dataField:String = cit.dataNascita;
	         		if(dataField==null || dataField.length==0)return "";
	         		var data:Date	= UtilDate.fromStringToDate( dataField );
         			return formatter.format( data );
       			}
       			return " - ";
      		}
      		private function labelComune(item:Object, column:DataGridColumn):String
      		{
      			var cit:Cittadino = item as Cittadino;
      			if(cit.localitaNascita!=null)
      			{
      				return cit.localitaNascita.descrizione
      			}
      			return " - ";
      		}
      		private function nomeCittadino(item:Object, column:DataGridColumn):String
      		{
      			var cit:Cittadino = item as Cittadino;
      			if(cit.nome!=null)
      			{
      				return cit.nome;
      			}
      			return " - ";
      		}
      		private function statoAssistito(item:Object, column:DataGridColumn):String 
      		{
      			var cit:Cittadino = item as Cittadino;
      			if(cit.assistenza!=null)
      			{
      				return cit.assistenza.statoAssistito;
      			}
      			return " - ";
      		}
      		private function cognomeCittadino(item:Object, column:DataGridColumn):String 
      		{
      			var cit:Cittadino = item as Cittadino;
      			if(cit.cognome!=null)
      			{
      				return cit.cognome;
      			}
      			return " - ";
      		}
      		private function codiceSanitario(item:Object, column:DataGridColumn):String
      		{
      			var cit:Cittadino = item as Cittadino;
      			if(cit.assistenza!=null)
      			{
      				return cit.assistenza.idAssistito;
      			}
      			return " - ";
      		} 
      		 
		]]>
	</mx:Script>
		   
	<!-- STATI -->
	<mx:states>
		<mx:State name="{IDENT_SINGOLA}" enterState="onEnterState(event)"/>
		<mx:State name="{IDENT_MULTIPLA}" enterState="onEnterState(event)"/>
	</mx:states>
	
	<!-- GRAFICA -->
	<!-- singola -->
	<mx:HBox width="100%" height="100%" horizontalAlign="left">
		<!-- BOX DEI CAMPI -->
		<mx:VBox width="100%" height="100%" verticalAlign="middle" verticalGap="10" >
			<mx:Spacer height="100%"/>
			<!-- IDENTIFICATIVO -->
			<mx:HBox width="300" >
				<mx:HBox horizontalAlign="right" width="50%">
					<mx:Label text="Identificativo"  />	
				</mx:HBox>
					
				<mx:TextInput   
					maxChars="16" 
					enabled="{enableUpField}" 
					change="onChangeInputIdentificativo(event);" >
					<mx:addedToStage>
						<![CDATA[
							this.identificativo  = event.target as TextInput;
						]]>
					</mx:addedToStage>
				</mx:TextInput>
			</mx:HBox>
			
			<!-- NOME -->
			<mx:HBox width="300" >
				<mx:HBox horizontalAlign="right" width="50%">
					<mx:Label text="Nome" />	
				</mx:HBox>
				
				<mx:TextInput   enabled="{disabilitaField &amp;&amp; enableUpField}" change="upperCase(event)">
					<mx:addedToStage>
						<![CDATA[
							this.nome = event.target as TextInput;
						]]>
					</mx:addedToStage>
				</mx:TextInput>
			</mx:HBox>
			
			<!-- COGNOME -->
			<mx:HBox width="300" >
				<mx:HBox horizontalAlign="right" width="50%">
					<mx:Label text="Cognome" />	
				</mx:HBox>
				
				<mx:TextInput enabled="{disabilitaField &amp;&amp; enableUpField}" change="upperCase(event)">
					<mx:addedToStage>
						<![CDATA[
							this.cognome = event.target as TextInput;
						]]>
					</mx:addedToStage>
				</mx:TextInput>
			</mx:HBox>
			
			<!-- DATADINASCITA -->
			<mx:HBox width="300" horizontalScrollPolicy="off">
				<mx:HBox horizontalAlign="right" width="50%">
					<mx:Label text="Data di nascita" />	
				</mx:HBox>
				
				<mx:DateField  width="160" formatString="DD / MM / YYYY" enabled="{disabilitaField &amp;&amp; enableUpField}">
					<mx:addedToStage>
						<![CDATA[
							this.dataDiNascita = event.target as DateField;
						]]>
					</mx:addedToStage>
				</mx:DateField>
			</mx:HBox>
			
			<!-- COMBOPROVINCIA -->
			<mx:HBox width="300" horizontalScrollPolicy="off">
				<mx:HBox horizontalAlign="right" width="50%">
					<mx:Label text="Provincia di nascita" />
				</mx:HBox>
				
				<mx:ComboBox  width="169" dataProvider="{elencoProvincie}" 
					change="onChangeValueComboBoxProvincia(event);" labelField="descrizione"  
					fontSize="10" prompt="Selezionare una provincia"  
					enabled="{disabilitaField &amp;&amp; enableUpField}">
					<mx:addedToStage>
						<![CDATA[
							this.comboProvincia = event.target as ComboBox;
						]]>
					</mx:addedToStage>
				</mx:ComboBox>
			</mx:HBox>
			
			<!-- COMBO COMUNE -->
			<mx:HBox width="300" horizontalScrollPolicy="off">
				<mx:HBox horizontalAlign="right" width="50%">
					<mx:Label text="Comune di nascita" />
				</mx:HBox>
				
				<mx:ComboBox width="169" dataProvider="{elencoComuni}" 
					labelField="descrizione"  fontSize="10" prompt="Selezionare un comune" 
					enabled="{disabilitaField &amp;&amp; elencoComuni!=null &amp;&amp; elencoComuni.length>0 &amp;&amp; enableUpField}">
					<mx:addedToStage>
						<![CDATA[
							this.comboComune = event.target as ComboBox;  
						]]>
					</mx:addedToStage>
				</mx:ComboBox>
			</mx:HBox>
		</mx:VBox>
	 
		<mx:VBox width="100%" height="100%" verticalAlign="middle" verticalGap="10" >
			<mx:Spacer height="100%"/>
			<!-- SESSO -->
			<mx:HBox width="300" horizontalScrollPolicy="off">
				<mx:HBox horizontalAlign="left" width="50%">
					<mx:Label text="Sesso" />
				</mx:HBox>
				 
				<mx:HBox verticalAlign="middle">
					<mx:RadioButtonGroup id="sesso" enabled="{disabilitaField &amp;&amp; enableUpField}"/>
					<mx:RadioButton label="M" groupName="sesso" />
					<mx:RadioButton label="F" groupName="sesso" />
				</mx:HBox>
			</mx:HBox>
		
			<!-- PAGINA NR -->
			<mx:HBox width="300" horizontalScrollPolicy="off">
				<mx:HBox horizontalAlign="left" width="50%">
					<mx:Label text="Pagina Nr." />
				</mx:HBox>
				 
				<mx:TextInput  width="28"  maxChars="2" enabled="{disabilitaField &amp;&amp; enableUpField}">
					<mx:addedToStage>
						<![CDATA[
							 this.pageNumber = event.target as TextInput;
						]]>
					</mx:addedToStage>
				</mx:TextInput>
			</mx:HBox>
		
			
			<!-- RIGHE PER PAGINA -->
			<mx:HBox width="300" horizontalScrollPolicy="off">
				<mx:HBox horizontalAlign="left" width="50%">
					<mx:Label text="Righe per pagina" />
				</mx:HBox>
				 
				<mx:TextInput width="36" maxChars="3" enabled="{disabilitaField &amp;&amp; enableUpField}">
					<mx:addedToStage>
						<![CDATA[
							this.maxRecord = event.target as TextInput;
						]]>
					</mx:addedToStage>
				</mx:TextInput>
			</mx:HBox>
			
			<!-- COMBOWILCARD -->
			<mx:HBox width="300" horizontalScrollPolicy="off">
				<mx:HBox horizontalAlign="left" width="50%">
					<mx:Label text="Criterio ricerca assistito"  />
				</mx:HBox>
				
				<mx:ComboBox  width="169" fontSize="10" enabled="{disabilitaField &amp;&amp; enableUpField}">
					<mx:dataProvider>
						<mx:Array>
							<mx:String>Cognome e Nome parziale</mx:String>
							<mx:String>Cognome e Nome puntuale</mx:String>
							<mx:String>Solo Nome puntuale</mx:String>
							<mx:String>Solo Cognome puntuale</mx:String>
						</mx:Array>
					</mx:dataProvider>
					<mx:addedToStage>
						<![CDATA[
							this.comboWilCard = event.target as ComboBox;
						]]>
					</mx:addedToStage>
				</mx:ComboBox> 
			</mx:HBox>
			
			<!-- BOTTTONI -->
			
		</mx:VBox>
		<!-- =================================================================== -->
		  
				<!-- Occorrenze 
				<mx:HBox verticalAlign="middle" width="140">
					<mx:Label text="Risultato ricerca:"/>
					<mx:Text text="{occorrenze}" enabled="{disabilitaField &amp;&amp; enableUpField}">
						<mx:addedToStage>
							<![CDATA[
								this.occorenzeText = event.target as Text;
							]]>
						</mx:addedToStage>
					</mx:Text>
				</mx:HBox>
		-->	
		
		<!-- Pulsanti -->	
		<mx:VBox width="100%" height="100%">
			<mx:Spacer height="100%"/>
			<mx:HBox width="300" horizontalScrollPolicy="off" horizontalAlign="center">	
				<mx:Button label="Ricerca" 
					toolTip="{tooltipButtonRicerca}"  
					icon="{iconButtonRicerca}" 
					styleName="{styleButtonRicerca}" height="25" 
					buttonMode="true" 
					enabled="{enableUpField}"
					click="onClickPulsanteRicercaAssistito(event)">
					 <mx:addedToStage>
					 	<![CDATA[
					 		this.buttonRicercaAssistito = event.target as Button;
					 	]]>
					 </mx:addedToStage>
				</mx:Button>
					
				<mx:Button label="Azzera" 
					toolTip="{tooltipButtonAzzera}" 
					icon="{iconButtonAzzera}" 
					styleName="{styleButtonAzzera}" height="25" buttonMode="true" 
					click="onClickPulsanteAzzeraRicercaAssistito(event)">
					<mx:addedToStage>
						<![CDATA[
							this.buttonAzzeraAssistito = event.target as Button;
						]]>
					</mx:addedToStage>
				</mx:Button>
			</mx:HBox>
			
		</mx:VBox>						
		 
	</mx:HBox>
	
	<!-- multipla -->
	<mx:VBox width="100%" height="100%"
		backgroundColor="#FEFEF2" 
		visible="{vMultipla}" horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:HBox width="100%" height="100%"> 
		<mx:DataGrid  height="150" width="900" useHandCursor="true" 
					dataProvider="{elencoCittadini}" 
					itemClick="onSelectedItemTableAssistiti(event)"  >
				<mx:columns>
					<mx:DataGridColumn headerText="Codice Fiscale"  width="120" labelFunction="resizeColumn"/>
					<mx:DataGridColumn headerText="Codice Sanitario" labelFunction="codiceSanitario" width="100"/>
					<mx:DataGridColumn headerText="Cognome" labelFunction="cognomeCittadino" />
					<mx:DataGridColumn headerText="Nome" labelFunction="nomeCittadino" />
					<mx:DataGridColumn headerText="Stato" labelFunction="statoAssistito" width="70"/>
					<mx:DataGridColumn headerText="Data di nascita" width="90" 
						labelFunction="formatDateTableItemFromYYYYMMDDtoDD_MM_YYYY" />
					<mx:DataGridColumn headerText="Comune di nascita" labelFunction="labelComune"/>
				</mx:columns>
			</mx:DataGrid>
			
			<mx:Button  
				visible="{enableUpField &amp;&amp; disabilitaField}"
				label="Conferma" toolTip="Imposta il cittadino selezionato nella tabella." 
				icon="{iconBottoneConferma}" 
				styleName="{styleButtonConferma}" height="25" buttonMode="true" 
				click="onClickPulsanteConfermaAssistito(event)">
			</mx:Button>
		</mx:HBox>
		 
	</mx:VBox>
</mx:VBox>
