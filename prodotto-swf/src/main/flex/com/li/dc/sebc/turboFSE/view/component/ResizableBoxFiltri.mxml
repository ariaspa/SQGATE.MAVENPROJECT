<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	height="{testa.height+8}"
	color="0"
	backgroundColor="#BCFE9B"
	initialize="init();"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off" >
	<mx:Metadata>
		[Event(name="toggleEvent", type="com.li.dc.sebc.turboFSE.events.ToggleEvent")]
		[Event(name="messageEvent", type="com.li.dc.sebc.turboFSE.events.MessageEvent")]
		[Event(name="selectItems", type="com.li.dc.sebc.turboFSE.events.SelectItems")]
		[Event(name="positionBegins", type="com.li.dc.sebc.turboFSE.events.TurboEvent")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import it.lispa.siss.sebc.flex.collection.ArrayIterator;
			import it.lispa.siss.sebc.flex.collection.IIterator;
			import com.li.dc.sebc.turboFSE.view.skin.ResizableBoxSkin;
			import com.li.dc.sebc.turboFSE.events.TurboEvent;
			import com.li.dc.sebc.turboFSE.events.MessageEvent;
			import com.li.dc.sebc.turboFSE.events.ToggleEvent;
			import com.li.dc.sebc.turboFSE.events.SelectItems;
			//
			import mx.utils.ColorUtil;
			import mx.binding.utils.BindingUtils;
			import mx.controls.listClasses.IListItemRenderer;
			import mx.events.TweenEvent;
			import mx.controls.Button;
			import flash.events.Event;
			//============================================================================
			private var flagEffect:Boolean = true;
			private var sel:Boolean;
			//============================================================================
			[Bindable]private var GAP:Number = 4;
			[Bindable]private var durationEffect:Number;
			[Bindable]private var xTo:Number;
			[Bindable]private var yTo:Number;
			[Bindable]private var heightTo:Number;
			[Bindable]private var widthTo:Number;
			[Bindable]private var newHeight:Number;
			[Bindable]private var messageToolTipClear:String 	= "Seleziona Tutto";
			[Bindable]private var messageToolTipEnlarge:String 	= "Premi per aprire";
			//============================================================================
			
			[Bindable]public var styleEnlargeButton:String 	= "EnlargeButton";
			[Bindable]public var styleCheckButton:String 	= "CheckButton";
			
			[Bindable]public var multiSelection:Boolean = false;
			[Bindable]public var listData:Object;
			//============================================================================
			// PUBLIC 
			public function reset():void
			{
				list.selectedIndices = [];
				//check.toggle = false;
				check.selected = false;
			}
			public function resetBtn():void
			{
				closeBtn.selected = false;
				messageToolTipEnlarge = (closeBtn.selected) ? "Premi per chiudere" : "Premi per aprire";
			}
			public function resizeBoxAndMove(endx:Number,endy:Number,w:Number,h:Number,duration:Number):void
			{
				durationEffect 	= duration;
				xTo 			= endx;
				yTo 			= endy;
				widthTo 		= w;
				heightTo 		= h;
				parallel.play( );
			}
			public function get selectedBTN():Boolean
			{
				return sel;
			}
			public function set selectedBTN(value:Boolean):void
			{
				sel = value;
				messageToolTipClear = (sel) ? "Cancella Tutto" : "Seleziona Tutto";
			}
			//============================================================================
			// click del bottone, cancella o riempe la list
			private function onClickClear(event:MouseEvent):void
			{
				event.stopPropagation();
				var t:Button = event.target as Button;
				if(t.selected && listData !=null && listData is Array && (listData as Array).length>0)
				{
					var temp:Array = new Array();
					var iterator:IIterator = new ArrayIterator(listData as Array);
					while(iterator.hasNext())
					{
						temp.push( iterator.next() );
					}
					list.selectedItems = temp;
				}else
				{
					list.selectedItems = [];
				}
				this.dispatchEvent( new SelectItems(list.selectedItems));
			}
			private function onClickLarge(event:MouseEvent):void
			{
				var t:Button = event.target as Button;
				messageToolTipEnlarge = (t.selected) ? "Premi per chiudere" : "Premi per aprire";
				dispatchEvent(new ToggleEvent(ToggleEvent.TOGGLE_EVENT,t.selected));
			}
			//============================================================================
			private function init():void
			{
				this.setStyle("borderSkin",ResizableBoxSkin);
				list.verticalScrollPolicy = "on";
				BindingUtils.bindProperty(this,"selectedBTN",check,"selected",true);
			}
			private function onUpdateResize(e:TweenEvent):void
			{
				box.height = this.height
			}
			private function onEndEffect(event:Event):void
			{
				box.height = this.height;
				flagEffect = !flagEffect;
				if(flagEffect)
				{
					dispatchEvent(new TurboEvent(TurboEvent.POSITION_BEGINS));
				}else
				{
					box.height = this.height;
				}
			}
			private function onChangeSelect(event:Event):void
			{
				if(!check.selected)
				{
					check.selected = true;
				}
				this.dispatchEvent( new SelectItems(list.selectedItems));
			}
			//============================================================================
			// ROLL OUT
			private function onRollOut(event:Event):void
			{
				dispatchEvent(new MessageEvent(MessageEvent.MESSAGE_EVENT, ""));
			}
			//============================================================================
			// ROLL OVER
			private function onRollOver(event:Event):void
			{
				var msg:String = getMessage();
				dispatchEvent(new MessageEvent(MessageEvent.MESSAGE_EVENT, msg));
			}
			private function getMessage():String
			{
				var items:Array = list.selectedItems;
				var message:String = "<FONT size='12'color='#000000'>";
				var tit:String = getTitolo()+"<BR>";
				if(items.length>0)
				{
					for(var i:uint = 0;i<items.length;i++){
						var itm:Object = items[i];
						message +=  itm + ((i<items.length-1) ? "<BR>" : "");
					}
				}
				return tit + message +"</FONT>";
			}
			private function getTitolo():String
			{
				return "<FONT size='14'color='#000000'><b>"+this.label+"</b></FONT>";
			}
			//============================================================================
		]]>
	</mx:Script>
	<mx:Parallel id="parallel" duration="{durationEffect}" target="{this}" effectEnd="onEndEffect(event);" >
		<mx:Move yFrom="{this.y}" xFrom="{this.x}" yTo="{yTo}" xTo="{xTo}" />
		<mx:Resize id="resize" heightFrom="{this.height}" widthFrom="{this.width}" heightTo="{heightTo}" widthTo="{widthTo}" />
	</mx:Parallel>
	
	<mx:VBox 
		id="box"
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		width="100%" height="100" 
		paddingBottom="{GAP}"
		paddingLeft="{GAP}"
		paddingRight="{GAP}"
		paddingTop="{GAP}"
		verticalGap="{GAP}">
		
		<mx:HBox 
			paddingBottom="{GAP}"
			paddingLeft="{GAP}"
			paddingRight="{GAP}"
			paddingTop="{GAP}"
			id="testa"
			verticalAlign="middle"
			width="100%" height="30" 
			backgroundAlpha="0">
			
			<mx:Label id="lab"
				color="{ColorUtil.adjustBrightness(this.getStyle('backgroundColor') as int,-200)}"
				toolTip="{this.label}" 
				x="0" width="{testa.width/2}"
				textAlign="left" text="{this.label}" 
				rollOver="onRollOver(event);" 
				rollOut="onRollOut(event)"/>
			
			
			<mx:Spacer width="50%" />
			
			<mx:Button id="check"
				toggle="true" width="15"  
				styleName="{styleCheckButton}" height="15" 
				click="onClickClear(event);" toolTip="{messageToolTipClear}"/>
			
			<mx:Spacer width="5" />
			
			<mx:Button 
				id="closeBtn"
				toggle="true" width="15" 
				height="15" styleName="{styleEnlargeButton}" 
				click="onClickLarge(event);" toolTip="{messageToolTipEnlarge}"/>
			
			<mx:Spacer width="5" />
								
		</mx:HBox>
		
		<mx:List 
			backgroundAlpha="0"
			id="list"
			width="100%"
			height="100%"
			dataProvider="{listData}"
			change="onChangeSelect(event);"
			allowMultipleSelection="{multiSelection}"
			borderStyle="none"
			toolTip="Seleziona una o piÃ¹ occorrenze, tenendo premuto il tasto CTRL"
			fontSize="11"
			labelField="label" 
			horizontalScrollPolicy="auto"
			verticalScrollPolicy="off"
			textAlign="left"
			useRollOver="true" />			
	</mx:VBox>
	
</mx:Canvas>
